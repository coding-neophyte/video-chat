<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Chat</title>

    <script>
        const roomId = "<%= roomid %>"
        </script>
    <script src="https://unpkg.com/peerjs@1.4.7/dist/peerjs.min.js"></script>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>

    <style>
        video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        #video-grid {
            display: grid;
            grid-auto-rows: 300px;
            grid-template-columns: repeat(auto-fill, 300px);
        }
    </style>
</head>
<body>
    <div id="video-grid"></div>
    <script>
        const socket = io('/');
        const videoGrid = document.getElementById('video-grid');

        const myPeer = new Peer(undefined, {
            host: '/',
            port: '7890'
        })

        const myVideo = document.createElement('video');
        myVideo.muted = true;

        const peers = {};

        navigator.mediaDevices.getUserMedia({
            video: true,
            audio: true
        }).then((stream) => {
            addVideoStream(myVideo, stream)

            myPeer.on('call', call => {
                call.answer(stream);
                const video = document.createElement('video')
                call.on('stream', userVideoStream => {
                    addVideoStream(video, userVideoStream)
                })
            })
            socket.on('user-connected', userId => {
                connectToNewUser(userId, stream)
            })
        })
        socket.on('user-disconnected', userId => {
            if(peers[userId]) peers[userId].close()
        })

        myPeer.on('open', id => {
            socket.emit('join-room', roomId, id)
        })

        const connectToNewUser = (userId, stream) => {
            const call = myPeer.call(userId, stream)
            const video = document.createElement('video');
            call.on('stream', userVideoStream => {
                addVideoStream(video, userVideoStream)
            })
            call.on('close', () => {
                video.remove();
            })
            peers[userId] = call;
        }

        const addVideoStream = (video, stream) => {
            video.srcObject = stream;
            video.addEventListener('loadedmetadata', () => {
                video.play();
            })
            videoGrid.append(video);
        }
    </script>
</body>
</html>
